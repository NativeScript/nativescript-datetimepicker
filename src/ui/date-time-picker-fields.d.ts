import { Property, GridLayout, EventData } from "@nativescript/core";
import { DatePickerField } from "./date-picker-field";
import { TimePickerField } from "./time-picker-field";
declare type ScrollOrientation = 'horizontal' | 'vertical';
export declare class DateTimePickerFields extends GridLayout {
    dateField: DatePickerField;
    timeField: TimePickerField;
    date: Date;
    maxDate: Date;
    minDate: Date;
    dateFormat: string;
    timeFormat: string;
    locale: string;
    hintDate: string;
    hintTime: string;
    pickerDefaultDate: Date;
    pickerTitleDate: string;
    pickerTitleTime: string;
    pickerOkText: string;
    pickerCancelText: string;
    orientation: ScrollOrientation;
    autoPickTime: boolean;
    _shouldSkipTimeAssignment: boolean;
    private _dateChangeHandler;
    private _timeChangeHandler;
    constructor();
    static dateProperty: Property<DateTimePickerFields, Date>;
    static maxDateProperty: Property<DateTimePickerFields, Date>;
    static minDateProperty: Property<DateTimePickerFields, Date>;
    static dateFormatProperty: Property<DateTimePickerFields, string>;
    static timeFormatProperty: Property<DateTimePickerFields, string>;
    static localeProperty: Property<DateTimePickerFields, string>;
    static hintDateProperty: Property<DateTimePickerFields, string>;
    static hintTimeProperty: Property<DateTimePickerFields, string>;
    static pickerDefaultDateProperty: Property<DateTimePickerFields, Date>;
    static pickerTitleDateProperty: Property<DateTimePickerFields, string>;
    static pickerTitleTimeProperty: Property<DateTimePickerFields, string>;
    static pickerOkTextProperty: Property<DateTimePickerFields, string>;
    static pickerCancelTextProperty: Property<DateTimePickerFields, string>;
    static orientationProperty: Property<DateTimePickerFields, ScrollOrientation>;
    static autoPickTimeProperty: Property<DateTimePickerFields, boolean>;
    private static datePropertyChanged;
    private static maxDatePropertyChanged;
    private static minDatePropertyChanged;
    private static dateFormatPropertyChanged;
    private static timeFormatPropertyChanged;
    private static localePropertyChanged;
    private static hintDatePropertyChanged;
    private static hintTimePropertyChanged;
    private static pickerDefaultDatePropertyChanged;
    private static pickerTitleDatePropertyChanged;
    private static pickerTitleTimePropertyChanged;
    private static pickerOkTextPropertyChanged;
    private static pickerCancelTextPropertyChanged;
    private static orientationPropertyChanged;
    private static autoPickTimePropertyChanged;
    createNativeView(): Object;
    initNativeView(): void;
    disposeNativeView(): void;
    addEventListener(eventNames: string, callback: (data: EventData) => void, thisArg?: Object): void;
    removeEventListener(eventNames: string, callback?: any, thisArg?: Object): void;
    private _updateHandlers;
    private _handleClassNameChange;
    private static _updateOrientation;
}
export declare function dateValueConverter(v: any): Date;
export {};
